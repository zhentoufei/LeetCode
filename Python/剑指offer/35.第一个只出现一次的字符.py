# -*- coding: utf-8 -*-
__author__ = 'Mr.Finger'
__date__ = '2017/10/2 21:11'
__site__ = ''
__software__ = 'PyCharm'
__file__ = '35.第一个只出现一次的字符.py'

'''
在一个字符串(1<=字符串长度<=10000，全部由大写字母组成)中找到第一个只出现一次的字符。
'''


'''
相关题目：
（1）定义一个函数，输入两个字符串，从第一个字符串中删除在第二个字符串中出现过的所有字符。
例如从第一个字符串“We are students. ”删除第二个字符串"aeiou"中出现过的字符得到的结果是“W r Stdnts. ”。
为了解决这个问题，我们可以创建一个用数组实现的简单哈希表来存储第二个字符串。
这样我们从头到尾扫描第一个字符串的每一个字符时，用O(1)时间就能判断出该字符是不是在第二个字符中。
如果第一个字符串的长度是n.那么总的时间复杂度是O(n).
（2）定义一个函数，删除字符串中所有重复出现的字符。例如输入“google”,删除重复的字符之后的结果是"gole"。
这个题目和上面的问题比较类似，我们可以创建一个用布尔类型数组实现的简单的哈希表。数组中的元素的意义是其下标
看做ASCII码后对应的字母在字符串中是否已经出现。我们先把数组中2的元素都设为false。以“google”为例，当扫描到
第一个g时，g的ASCII码是103，那么我们把数组中下标为103的元素的值设为true。当扫描到第二个g时，我们发现数组
中下标为103的元素的值是true，就知道g在前面已经出现了。也就是说，我们用O(1)时间就能判断出每个字符是否在前面
出现过。如果字符串长度是n，那么总的时间复杂度是O(n)。
（3）在英语中，如果两个单词中出现的字符相同，并且每个字母出现的次数也相同，那么这两个单词互为变位词。
例如silent与listen、evil与live等互为变位词。请完成一个函数，判断输入的两个字符串是不是互为变位词。请完成
一个函数，判断输入的两个字符串是不是互为变位词。我们可以创建一个用数组实现的简单哈希表，用来统计字符串中每个
字符出现的次数。当扫描到第一个字符串中的每个字符时，为哈希表对应的项的值增加1.接下来扫描第二个字符串，扫描到
每个字符时，为哈希表对应的项的值减去1.如果扫描完第二个字符串后，哈希表中所有的值都是0，那么这两个字符串就互为
变位词。
举一反三：
如果需要判断多个字符是不是在某个字符串里出现过或者统计多个字符在某个字符串中出现的次数，我们可以考虑基于数组创
建一个简单的哈希表。这样可以用很小的空间消耗来换时间效率的提升。
'''

def findNoRepeatChar(s):
    if s == None or len(s) <= 0:
        return -1

    alpha = {}
    a_list = list(s)
    for i in a_list:
        if i not in alpha.keys():
            alpha[i] = 0
        alpha[i] += 1

    for i in a_list:
        if alpha[i] == 1:
            return i

    return -1


if __name__ == '__main__':
    print findNoRepeatChar(u'你好你好啊')